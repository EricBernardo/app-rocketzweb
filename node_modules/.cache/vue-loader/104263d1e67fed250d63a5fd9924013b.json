{"remainingRequest":"E:\\www\\rocketzweb\\app-rocketzweb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\www\\rocketzweb\\app-rocketzweb\\src\\views\\order\\form.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\www\\rocketzweb\\app-rocketzweb\\src\\views\\order\\form.vue","mtime":1558094709566},{"path":"E:\\www\\rocketzweb\\app-rocketzweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558094675814},{"path":"E:\\www\\rocketzweb\\app-rocketzweb\\node_modules\\babel-loader\\lib\\index.js","mtime":1558094675065},{"path":"E:\\www\\rocketzweb\\app-rocketzweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558094675814},{"path":"E:\\www\\rocketzweb\\app-rocketzweb\\node_modules\\vue-loader\\lib\\index.js","mtime":1558094702090}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { show, save } from \"@/api/order\";\r\nimport { getAllProducts } from \"@/api/product\";\r\nimport { getAllClients } from \"@/api/client\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      products: [],\r\n      clients: [],\r\n      form: {\r\n        client_id: null,\r\n        discount: 0,\r\n        products: [],\r\n        paid: false,\r\n        subtotal: 0,\r\n        total: 0\r\n      },\r\n      rules: {\r\n        client_id: [\r\n          {\r\n            required: true\r\n          }\r\n        ],\r\n        products: [\r\n          {\r\n            required: true\r\n          }\r\n        ]\r\n      }\r\n    };\r\n  },\r\n  created() {\r\n    let form = this.form;\r\n\r\n    getAllProducts().then(response => {\r\n      this.products = response.data.data;\r\n    });\r\n    getAllClients().then(response => {\r\n      this.clients = response.data.data;\r\n    });\r\n\r\n    this.getOrder();\r\n  },\r\n  methods: {\r\n    getOrder() {\r\n      let form = this.form;\r\n      if (this.$route.params.id) {\r\n        this.loading = true;\r\n        show(this.$route.params.id).then(response => {\r\n          form.products = [];\r\n          Object.values(response.data.products).forEach(product => {\r\n            form.products.push({\r\n              id: product.pivot.id,\r\n              product_id: product.id,\r\n              quantity: product.pivot.quantity,\r\n              price: product.pivot.price,\r\n              total: product.pivot.price * product.pivot.quantity,\r\n              block: true\r\n            });\r\n          });\r\n          form.client_id = response.data.client_id;\r\n          form.discount = response.data.discount;\r\n          form.paid = response.data.paid ? true : false;\r\n          form.subtotal = response.data.subtotal;\r\n          form.total = response.data.total;\r\n          this.loading = false;\r\n        });\r\n      }\r\n    },\r\n    calculateProduct(row) {\r\n      if (!row.block) {\r\n        let price = 0;\r\n        Object.values(this.products).forEach(function(value) {\r\n          if (value.id == row.product_id) {\r\n            price = value.price;\r\n          }\r\n        });\r\n        row.price = price;\r\n        row.total = row.quantity * row.price;\r\n      }\r\n      this.calculateOrder();\r\n    },\r\n    calculateOrder() {\r\n      let total = 0;\r\n      let form = this.form;\r\n      form.subtotal = 0;\r\n      form.total = 0;\r\n      Object.values(form.products).forEach(function(value) {\r\n        total += value.total;\r\n      });\r\n      form.discount = Math.abs(form.discount);\r\n      form.subtotal = total;\r\n      form.total = total - form.discount;\r\n    },\r\n    addProduct() {\r\n      if (this.products.length) {\r\n        let product = this.products[0];\r\n        this.form.products.push({\r\n          product_id: product.id,\r\n          quantity: 1,\r\n          price: product.price,\r\n          total: product.price,\r\n          block: false\r\n        });\r\n      } else {\r\n        this.$message({\r\n          message: \"Produto nÃ£o encontrado\",\r\n          type: \"error\",\r\n          duration: 5 * 1000\r\n        });\r\n      }\r\n    },\r\n    removeProduct(row) {\r\n      var index = this.form.products.indexOf(row);\r\n      if (index > -1) {\r\n        this.form.total -= this.form.products.price;\r\n        this.form.subtotal -= this.form.products.price;\r\n        this.form.products.splice(index, 1);\r\n      }\r\n    },\r\n    onSubmit(formName) {\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          this.loading = true;\r\n          save(this.form, this.$route.params.id)\r\n            .then(response => {\r\n              this.$message({\r\n                message: \"Salvo com sucesso\",\r\n                type: \"success\",\r\n                duration: 5 * 1000\r\n              });\r\n              if (!this.$route.params.id) {\r\n                this.$refs[formName].resetFields();\r\n                this.form.products = [];\r\n              }\r\n              this.getOrder();\r\n            })\r\n            .finally(responde => {\r\n              this.loading = false;\r\n            });\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n",null]}