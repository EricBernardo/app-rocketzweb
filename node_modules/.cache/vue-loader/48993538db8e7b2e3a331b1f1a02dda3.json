{"remainingRequest":"E:\\www\\rocketzweb\\app-rocketzweb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\www\\rocketzweb\\app-rocketzweb\\src\\views\\client\\form.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\www\\rocketzweb\\app-rocketzweb\\src\\views\\client\\form.vue","mtime":1556890807411},{"path":"E:\\www\\rocketzweb\\app-rocketzweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\www\\rocketzweb\\app-rocketzweb\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\www\\rocketzweb\\app-rocketzweb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\www\\rocketzweb\\app-rocketzweb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getStates } from \"@/api/state\";\r\nimport { getCities } from \"@/api/city\";\r\nimport { getCEP } from \"@/api/cep\";\r\nimport { show, save } from \"@/api/client\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      loading: false,\r\n      states: [],\r\n      cities: [],\r\n      form: {\r\n        title: null,\r\n        address: null,\r\n        cep: null,\r\n        state_id: null,\r\n        city_id: null,\r\n        cnpj: null,\r\n        neighborhood: null,\r\n        number: null\r\n      },\r\n      rules: {\r\n        title: [\r\n          {\r\n            required: true\r\n          }\r\n        ],\r\n        address: [\r\n          {\r\n            required: true\r\n          }\r\n        ],\r\n        cep: [\r\n          {\r\n            required: true\r\n          }\r\n        ],\r\n        state_id: [\r\n          {\r\n            required: true\r\n          }\r\n        ],\r\n        city_id: [\r\n          {\r\n            required: true\r\n          }\r\n        ],\r\n        cnpj: [\r\n          {\r\n            required: true\r\n          }\r\n        ],\r\n        neighborhood: [\r\n          {\r\n            required: true\r\n          }\r\n        ],\r\n        number: [\r\n          {\r\n            required: true\r\n          }\r\n        ]\r\n      }\r\n    };\r\n  },\r\n  created() {\r\n    getStates().then(response => {\r\n      this.states = response.data.data;\r\n    });\r\n\r\n    if (this.$route.params.id) {\r\n      this.loading = true;\r\n      show(this.$route.params.id).then(response => {\r\n        Object.keys(this.form).forEach(key => {\r\n          this.form[key] = response.data.data[key];\r\n          if (key == \"state_id\") {\r\n            this.getCities();\r\n          }\r\n        });\r\n        this.loading = false;\r\n      });\r\n    }\r\n  },\r\n  methods: {\r\n    onSubmit(formName) {\r\n      this.$refs[formName].validate(valid => {\r\n        if (valid) {\r\n          this.loading = true;\r\n          save(this.form, this.$route.params.id)\r\n            .then(response => {\r\n              this.$message({\r\n                message: \"Salvo com sucesso\",\r\n                type: \"success\",\r\n                duration: 5 * 1000\r\n              });\r\n              if (!this.$route.params.id) {\r\n                this.$refs[formName].resetFields();\r\n              }\r\n            })\r\n            .finally(responde => {\r\n              this.loading = false;\r\n            });\r\n        }\r\n      });\r\n    },\r\n    getCities(change = false, city = null) {\r\n      getCities(this.form.state_id).then(response => {\r\n        this.cities = response.data.data;\r\n        let form = this.form;\r\n        if (change) {\r\n          form.city_id = null;\r\n          if (city) {\r\n            Object.values(this.cities).forEach(function(item) {\r\n              if (item.name == city) {\r\n                form.city_id = item.id;\r\n              }\r\n            });\r\n          }\r\n        }\r\n      });\r\n    },\r\n    getCep() {\r\n      let __this = this;\r\n      getCEP(this.form.cep).then(response => {\r\n        if (response.data.data) {\r\n          let form = this.form;\r\n          let cities = this.cities;\r\n          form.neighborhood = response.data.data.bairro;\r\n          form.address = response.data.data.logradouro;\r\n          Object.values(this.states).forEach(function(state) {\r\n            if (state.abbr == response.data.data.uf) {\r\n              form.state_id = state.id;\r\n              __this.getCities(form.state_id, response.data.data.localidade);\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n};\r\n",null]}