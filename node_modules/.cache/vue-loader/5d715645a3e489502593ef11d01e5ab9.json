{"remainingRequest":"/home/eric/code/app-rocketzweb/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/eric/code/app-rocketzweb/src/views/order/form.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/eric/code/app-rocketzweb/src/views/order/form.vue","mtime":1557879961371},{"path":"/home/eric/code/app-rocketzweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/eric/code/app-rocketzweb/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/eric/code/app-rocketzweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/eric/code/app-rocketzweb/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { show, save } from \"@/api/order\";\nimport { getAllProducts } from \"@/api/product\";\nimport { getAllClients } from \"@/api/client\";\n\nexport default {\n  data() {\n    return {\n      loading: false,\n      products: [],\n      clients: [],\n      form: {\n        client_id: null,\n        discount: 0,\n        products: [],\n        paid: false,\n        subtotal: 0,\n        total: 0\n      },\n      rules: {\n        client_id: [\n          {\n            required: true\n          }\n        ],\n        products: [\n          {\n            required: true\n          }\n        ]\n      }\n    };\n  },\n  created() {\n    let form = this.form;\n\n    getAllProducts().then(response => {\n      this.products = response.data.data;\n    });\n    getAllClients().then(response => {\n      this.clients = response.data.data;\n    });\n\n    this.getOrder();\n  },\n  methods: {\n    getOrder() {\n      let form = this.form;\n      if (this.$route.params.id) {\n        this.loading = true;\n        show(this.$route.params.id).then(response => {\n          form.products = [];\n          Object.values(response.data.products).forEach(product => {\n            form.products.push({\n              id: product.pivot.id,\n              product_id: product.id,\n              quantity: product.pivot.quantity,\n              price: product.pivot.price,\n              total: product.pivot.price * product.pivot.quantity,\n              block: true\n            });\n          });\n          form.client_id = response.data.client_id;\n          form.discount = response.data.discount;\n          form.paid = response.data.paid ? true : false;\n          form.subtotal = response.data.subtotal;\n          form.total = response.data.total;\n          this.loading = false;\n        });\n      }\n    },\n    calculateProduct(row) {\n      if (!row.block) {\n        let price = 0;\n        Object.values(this.products).forEach(function(value) {\n          if (value.id == row.product_id) {\n            price = value.price;\n          }\n        });\n        row.price = price;\n        row.total = row.quantity * row.price;\n      }\n      this.calculateOrder();\n    },\n    calculateOrder() {\n      let total = 0;\n      let form = this.form;\n      form.subtotal = 0;\n      form.total = 0;\n      Object.values(form.products).forEach(function(value) {\n        total += value.total;\n      });\n      form.discount = Math.abs(form.discount);\n      form.subtotal = total;\n      form.total = total - form.discount;\n    },\n    addProduct() {\n      if (this.products.length) {\n        let product = this.products[0];\n        this.form.products.push({\n          product_id: product.id,\n          quantity: 1,\n          price: product.price,\n          total: product.price,\n          block: false\n        });\n      } else {\n        this.$message({\n          message: \"Produto nÃ£o encontrado\",\n          type: \"error\",\n          duration: 5 * 1000\n        });\n      }\n    },\n    removeProduct(row) {\n      var index = this.form.products.indexOf(row);\n      if (index > -1) {\n        this.form.total -= this.form.products.price;\n        this.form.subtotal -= this.form.products.price;\n        this.form.products.splice(index, 1);\n      }\n    },\n    onSubmit(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          this.loading = true;\n          save(this.form, this.$route.params.id)\n            .then(response => {\n              this.$message({\n                message: \"Salvo com sucesso\",\n                type: \"success\",\n                duration: 5 * 1000\n              });\n              if (!this.$route.params.id) {\n                this.$refs[formName].resetFields();\n                this.form.products = [];\n              }\n              this.getOrder();\n            })\n            .finally(responde => {\n              this.loading = false;\n            });\n        }\n      });\n    }\n  }\n};\n",null]}