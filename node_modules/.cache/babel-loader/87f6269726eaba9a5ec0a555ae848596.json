{"remainingRequest":"/home/eric/code/app-rocketzweb/node_modules/thread-loader/dist/cjs.js!/home/eric/code/app-rocketzweb/node_modules/babel-loader/lib/index.js!/home/eric/code/app-rocketzweb/src/utils/request.js","dependencies":[{"path":"/home/eric/code/app-rocketzweb/src/utils/request.js","mtime":1556977859890},{"path":"/home/eric/code/app-rocketzweb/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/eric/code/app-rocketzweb/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/eric/code/app-rocketzweb/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Object$values from \"/home/eric/code/app-rocketzweb/node_modules/@babel/runtime-corejs2/core-js/object/values\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _Promise from \"/home/eric/code/app-rocketzweb/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport router from '@/router';\nimport store from '@/store';\nimport { getToken, removeToken } from '@/utils/auth';\nimport axios from 'axios';\nimport { Message } from 'element-ui'; // create an axios instance\n\nvar service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  // url = base url + request url\n  withCredentials: false,\n  // send cookies when cross-domain requests\n  timeout: 5000 // request timeout\n\n}); // request interceptor\n\nservice.interceptors.request.use(function (config) {\n  // do something before request is sent\n  if (store.getters.token) {\n    // let each request carry token\n    // ['X-Token'] is a custom headers key\n    // please modify it according to the actual situation\n    config.headers['Authorization'] = 'Bearer ' + getToken();\n  }\n\n  return config;\n}, function (error) {\n  // do something with request error\n  console.log(error); // for debug\n\n  return _Promise.reject(error);\n}); // response interceptor\n\nservice.interceptors.response.use(\n/**\n * If you want to get http information such as headers or status\n * Please return  response => response\n */\n\n/**\n * Determine the request status by custom code\n * Here is just an example\n * You can also judge the status by HTTP Status Code\n */\nfunction (response) {\n  return response; // // if the custom code is not 20000, it is judged as an error.\n  // if (res.code !== 20000) {\n  //   Message({\n  //     message: res.message || 'error',\n  //     type: 'error',\n  //     duration: 5 * 1000\n  //   })\n  //   // 50008: Illegal token; 50012: Other clients logged in; 50014: Token expired;\n  //   if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\n  //     // to re-login\n  //     MessageBox.confirm('You have been logged out, you can cancel to stay on this page, or log in again', 'Confirm logout', {\n  //       confirmButtonText: 'Re-Login',\n  //       cancelButtonText: 'Cancel',\n  //       type: 'warning'\n  //     }).then(() => {\n  //       store.dispatch('user/resetToken').then(() => {\n  //         location.reload()\n  //       })\n  //     })\n  //   }\n  //   return Promise.reject(res.message || 'error')\n  // } else {\n  //   return res\n  // }\n}, function (error) {\n  var text = '';\n\n  if (error.response.status === 422) {\n    _Object$values(error.response.data.errors).forEach(function (values, key) {\n      if (!key) {\n        text += '<hr style=\"height:1px;border:none;color:red;background-color:red;\" />';\n      }\n\n      values.forEach(function (value) {\n        text += '<p>' + value + '</p>';\n      });\n    });\n  }\n\n  Message({\n    message: '<b>' + error.response.data.message + '</b>' + text,\n    type: 'error',\n    duration: 5 * 1000,\n    dangerouslyUseHTMLString: true\n  });\n\n  if (error.response.status === 403) {\n    router.push({\n      name: 'dashboard'\n    });\n  }\n\n  if (error.response.status === 401) {\n    removeToken();\n\n    if (location.hash.indexOf('login') === -1) {\n      setTimeout(function () {\n        location.reload();\n      }, 1000);\n    }\n  }\n\n  return _Promise.reject(error);\n});\nexport default service;",null]}